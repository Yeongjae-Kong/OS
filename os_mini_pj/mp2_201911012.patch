diff --git a/Makefile b/Makefile
index 04da7c6..19ff97a 100644
--- a/Makefile
+++ b/Makefile
@@ -182,7 +182,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
-	#_hostname\
+	_hostname\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index 806b1b1..8a67482 100644
--- a/proc.c
+++ b/proc.c
@@ -20,6 +20,9 @@ extern void trapret(void);
 
 static void wakeup1(void *chan);
 
+int ticks_start;
+int ticks_end;
+
 void
 pinit(void)
 {
@@ -184,6 +187,8 @@ fork(void)
   struct proc *np;
   struct proc *curproc = myproc();
 
+  ticks_start = ticks;
+
   // Allocate process.
   if((np = allocproc()) == 0){
     return -1;
@@ -260,6 +265,9 @@ exit(void)
         wakeup1(initproc);
     }
   }
+  ticks_end = ticks;
+  
+  cprintf("%s(%d) took %d ticks in wallclock\n", curproc->name, curproc->pid, ticks_end - ticks_start);
 
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
diff --git a/proc.h b/proc.h
index 1647114..6a81519 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/sh.c b/sh.c
index f3c063c..7bfdfa6 100644
--- a/sh.c
+++ b/sh.c
@@ -176,7 +176,7 @@ int
 getcmd(char *buf, int nbuf)
 {
   char hostname[64] = { 0, };
-  // TODO: Fill in hostname using gethostname()
+  gethostname(hostname);
   printf(2, "root@%s:%s$ ", hostname, pwd);
   memset(buf, 0, nbuf);
   gets(buf, nbuf);
@@ -184,45 +184,46 @@ getcmd(char *buf, int nbuf)
     return -1;
   return 0;
 }
-
-int
-main(void)
-{
-  static char buf[100];
-  int fd;
-
-  // Ensure that three file descriptors are open.
-  while((fd = open("console", O_RDWR)) >= 0){
-    if(fd >= 3){
-      close(fd);
-      break;
+int main(void) {
+    static char buf[100];
+    int fd;
+
+    // Ensure that three file descriptors are open.
+    while ((fd = open("console", O_RDWR)) >= 0) {
+        if (fd >= 3) {
+            close(fd);
+            break;
+        }
     }
-  }
 
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      // Chdir must be called by the parent, not the child.
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        printf(2, "cannot cd %s\n", buf+3);
-      else {
-        static char tmp[1024] = { 0, };
-        // Append x from chdir(x) to pwd using strcat(), add "/" appropriately
-        // TODO
-
-        // Collapse pwd path and save it to tmp
-        collapse_path(pwd, tmp);
-        // Copy tmp back to pwd
-        strcpy(pwd, tmp);
-      }
-      continue;
+    // Read and run input commands.
+    while (getcmd(buf, sizeof(buf)) >= 0) {
+        if (buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' ') {
+            // Chdir must be called by the parent, not the child.
+            buf[strlen(buf) - 1] = 0; // chop \n
+            if (chdir(buf + 3) < 0)
+                printf(2, "cannot cd %s\n", buf + 3);
+            else {
+                static char tmp[1024] = { 0, };
+                // Append x from chdir(x) to pwd using strcat(), add "/" appropriately
+                
+		if (strcmp(pwd, "/") != 0) {
+			strcat(pwd, "/");
+		}
+        	strcat(pwd, buf+3);				
+
+                // Collapse pwd path and save it to tmp
+                collapse_path(pwd, tmp);
+                // Copy tmp back to pwd
+                strcpy(pwd, tmp);
+            }
+            continue;
+        }
+        if (fork1() == 0)
+            runcmd(parsecmd(buf));
+        wait();
     }
-    if(fork1() == 0)
-      runcmd(parsecmd(buf));
-    wait();
-  }
-  exit();
+    exit();
 }
 
 void
diff --git a/syscall.c b/syscall.c
index ee85261..e37e238 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_gethostname(void);
+extern int sys_sethostname(void);
+
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_gethostname]   sys_gethostname,
+[SYS_sethostname]   sys_sethostname,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..80d4492 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_gethostname 22
+#define SYS_sethostname 23
diff --git a/sysproc.c b/sysproc.c
index 0686d29..6b0f08c 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "syscall.h"
 
 int
 sys_fork(void)
@@ -77,6 +78,30 @@ sys_sleep(void)
   return 0;
 }
 
+char hostname[64] = "DataLab";
+
+int sys_gethostname(void) {
+        char *user_hostname;
+	int i;
+        if (argptr(0, &user_hostname, sizeof(char) * 64) < 0)
+                return -1;
+        for (i=0; i<64 && hostname[i] != '\0'; i++)
+                user_hostname[i] = hostname[i];
+
+        user_hostname[i] = '\0';
+        return 0;
+}
+
+int sys_sethostname(void) {
+        char *user_hostname;
+        int i;
+        if (argstr(0, &user_hostname) < 0)
+                return -1;
+        for (i=0; i<64 && user_hostname[i] != '\0'; i++)
+                hostname[i] = user_hostname[i];
+        hostname[i] = '\0';
+        return 0;
+}
 // return how many clock tick interrupts have occurred
 // since start.
 int
diff --git a/user.h b/user.h
index f341021..6da2201 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int gethostname(char *);
+int sethostname(const char *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..0088100 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(gethostname)
+SYSCALL(sethostname)
