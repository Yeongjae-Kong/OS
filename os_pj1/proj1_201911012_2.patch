diff --git a/Makefile b/Makefile
index 04da7c6..5746891 100644
--- a/Makefile
+++ b/Makefile
@@ -182,6 +182,11 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+        _bench1\
+        _bench2\
+        _bench3\
+        _bench4\
+        _bench5\
 	#_hostname\
 
 fs.img: mkfs README $(UPROGS)
@@ -219,7 +224,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/param.h b/param.h
index a7e90ef..5524470 100644
--- a/param.h
+++ b/param.h
@@ -1,7 +1,7 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
 #define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
+#define NOFILE       64  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
 #define NDEV         10  // maximum major device number
diff --git a/proc.c b/proc.c
index 806b1b1..8198d74 100644
--- a/proc.c
+++ b/proc.c
@@ -14,6 +14,11 @@ struct {
 
 static struct proc *initproc;
 
+uint procstarttime;
+int numProc = 0;
+int weight = 1; // weights of all processes = 1
+int vt = 0; // virtual time
+
 int nextpid = 1;
 extern void forkret(void);
 extern void trapret(void);
@@ -88,7 +93,11 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  numProc++;
+  p->vd = 0;
+  if (numProc > 1) {
+      vt -= (1 - ticks + procstarttime) * 100 / numProc;
+  }// join competition, 소수점 연산 이슈로 vt 연산에 항상 100을 곱함.
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -260,7 +269,11 @@ exit(void)
         wakeup1(initproc);
     }
   }
-
+  //leave competition.  process를 줄이고 나서 vt를 업데이트한다. 소수점 연산 이슈로 vt 연산에 항상 100을 곱한다.
+  numProc -= 1;
+  if (numProc > 0) {
+      vt += (1 - ticks + procstarttime) * 100 / numProc;
+  }
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
   sched();
@@ -323,6 +336,7 @@ void
 scheduler(void)
 {
   struct proc *p;
+  struct proc *shortProc;
   struct cpu *c = mycpu();
   c->proc = 0;
   
@@ -335,14 +349,26 @@ scheduler(void)
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      // vd가 짧은 process schedule
+      shortProc = p;
+      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        if(p->state == RUNNABLE && p->vd < shortProc->vd)
+          shortProc = p;
+      }
+      p = shortProc;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+      
+      // process start time 초기화
+      procstarttime = ticks;
+      // vt 업데이트
+      if (numProc > 0) {
+        vt += 100/numProc*weight;
+      }      // 1/sum of weight를 더해줘야하지만 소수점 연산 불가하므로 * 100을 수행함. 모든 proc의 weight를 1로 가정하여 weight sum = number of proc과 동일시함.
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
@@ -385,6 +411,8 @@ sched(void)
 void
 yield(void)
 {
+  vt+=(1-ticks+procstarttime)*100/numProc;
+  myproc()->vd = vt+ticks-procstarttime+1; // vd => ve(=vt+s/w) + r/w(=1) => vt+runtime+1
   acquire(&ptable.lock);  //DOC: yieldlock
   myproc()->state = RUNNABLE;
   sched();
@@ -435,6 +463,8 @@ sleep(void *chan, struct spinlock *lk)
     acquire(&ptable.lock);  //DOC: sleeplock1
     release(lk);
   }
+  vt+=(1-ticks+procstarttime)*100/numProc;
+  p->vd = vt+ticks-procstarttime+1;
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
diff --git a/proc.h b/proc.h
index 1647114..1784acd 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int vd;                      // virtual deadline
 };
 
 // Process memory is laid out contiguously, low addresses first:
